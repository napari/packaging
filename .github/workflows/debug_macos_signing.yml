on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
    branches:
      - main
  pull_request:
    branches:
      - main
    paths-ignore:
      - "docs/**"
  schedule:
    - cron: "0 0 * * *"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

name: Debug OSX Signing

jobs:
  conda-build:
    name: Create packages
    runs-on: macos-latest
    if: github.repository == 'napari/packaging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create environment.yml
        shell: bash
        run: |
          cat <<EOF > environment.yml
          name: build-bundle
          channels:
            - napari/label/bundle_tools
            - conda-forge
          dependencies:
            - python 3.9
            - pip
            - constructor
            - conda-build
            - ruamel.yaml
            - conda-standalone
            - conda
            - conda-libmamba-solver
          EOF
      - name: install micromamba
        uses: mamba-org/provision-with-micromamba@main
      - name: Conda info
        shell: bash -el {0}
        run: |
          conda info -a
      - name: Load signing certificate
        shell: bash -el {0}
        env:
          APPLE_APPLICATION_CERTIFICATE_BASE64: ${{ secrets.APPLE_APPLICATION_CERTIFICATE_BASE64 }}
          APPLE_INSTALLER_CERTIFICATE_BASE64: ${{ secrets.APPLE_INSTALLER_CERTIFICATE_BASE64 }}
          APPLE_INSTALLER_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_INSTALLER_CERTIFICATE_PASSWORD }}
          TEMP_KEYCHAIN_PASSWORD: ${{ secrets.TEMP_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          INSTALLER_CERTIFICATE_PATH="$RUNNER_TEMP/installer_developer_cert.p12"
          APPLICATION_CERTIFICATE_PATH="$RUNNER_TEMP/application_developer_cert.p12"
          KEYCHAIN_PATH="$RUNNER_TEMP/installer-signing.keychain-db"

          # import certificate and provisioning profile from secrets
          echo -n "$APPLE_INSTALLER_CERTIFICATE_BASE64" | base64 --decode --output $INSTALLER_CERTIFICATE_PATH
          echo -n "$APPLE_APPLICATION_CERTIFICATE_BASE64" | base64 --decode --output $APPLICATION_CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$TEMP_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$TEMP_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $INSTALLER_CERTIFICATE_PATH -P $APPLE_INSTALLER_CERTIFICATE_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security import $APPLICATION_CERTIFICATE_PATH -P $APPLE_INSTALLER_CERTIFICATE_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # export identity name
          signing_identity=$(security find-identity $KEYCHAIN_PATH | grep -m 1 -o '"Developer ID Installer.*"' | tr -d '"')
          notarization_identity=$(security find-identity $KEYCHAIN_PATH | grep -m 1 -o '"Developer ID Application.*"' | tr -d '"')

          echo "CONSTRUCTOR_SIGNING_IDENTITY=${signing_identity}" >> $GITHUB_ENV
          echo "CONSTRUCTOR_NOTARIZATION_IDENTITY=${notarization_identity}" >> $GITHUB_ENV
      - name: Download conda-standalone
        shell: bash -el {0}
        run: |
          curl -LO https://anaconda.org/napari/conda-standalone/4.12a/download/osx-64/conda-standalone-4.12a-h694c41f_10.tar.bz2
          tar xvf conda-standalone-*.tar.bz2
      - name: Sign (no conda activation)
        run: |
          which codesign
          codesign  \
            --verbose  \
            --sign "$CONSTRUCTOR_NOTARIZATION_IDENTITY"  \
            --prefix org.napari  \
            --options runtime  \
            --force  \
            --entitlement entitlements.plist  \
            standalone_conda/conda.exe
      - name: Sign
        shell: bash -el {0}
        run: |
          # The conda environment might contain a different codesign!
          codesign=$(which codesign)
          if [[ $codesign =~ ${CONDA_PREFIX}.*]]; then
            mv "${codesign}" "${codesign}.in_conda_env"
          fi
          codesign  \
            --verbose  \
            --sign "$CONSTRUCTOR_NOTARIZATION_IDENTITY"  \
            --prefix org.napari  \
            --options runtime  \
            --force  \
            --entitlement entitlements.plist  \
            standalone_conda/conda.exe
